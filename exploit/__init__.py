import log
import utils.uuid
import config


def parse_payload_config(payload_loc: str) -> dict:
    result = {
        "payload_loc": payload_loc,
        "service": "0",
        "params": config.AVAILABLE_PARAMS_FOR_PAYLOADS
    }
    try:
        _uuid = utils.uuid.get_uuid()
        exec(f"import {payload_loc} as {_uuid}")
        try:
            service = eval(f"{_uuid}.SERVICE")
            if type(service) != str:
                log.log_warn(f"Service is not a string for payload {payload_loc}, using default")
            else:
                result["service"] = service
        except AttributeError:
            log.log_info(f"Using default SERVICE value for payload {payload_loc}")
        try:
            params = eval(f"{_uuid}.PARAMS")
            if type(params) != list:
                log.log_warn(f"Params is not a list for payload {payload_loc}, using default")
            else:
                result["params"] = params
        except AttributeError:
            log.log_info(f"Using default SERVICE value for payload {payload_loc}")
    except ModuleNotFoundError:
        log.log_error(f"Cannot import file {payload_loc}")
    return result


def parse_payload() -> str:
    """
    import threading
    for host in hosts:
    ct = threading.Thread(target=exploit, args=(target,))
    ct.start()
    """
    return ""


def exploit_hosts(hosts: list, payload_loc: str) -> str:
    pass
