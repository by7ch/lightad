import log
import utils.uuid
import config


def _parse_payload_config(payload_name: str) -> dict:
    result = {
        "payload_name": payload_name,
        "service": "0",
        "params": config.AVAILABLE_PARAMS_FOR_PAYLOADS
    }
    try:
        _uuid = utils.uuid.get_uuid()
        exec(f"import payloads.{payload_name} as {_uuid}")
        try:
            service = eval(f"{_uuid}.SERVICE")
            if type(service) != str:
                log.log_warn(f"Service is not a string for payload {payload_name}, using default")
            else:
                result["service"] = service
        except AttributeError:
            log.log_info(f"Using default SERVICE value for payload {payload_name}")
        try:
            params = eval(f"{_uuid}.PARAMS")
            if type(params) != list:
                log.log_warn(f"Params is not a list for payload {payload_name}, using default")
            else:
                result["params"] = params
        except AttributeError:
            log.log_info(f"Using default SERVICE value for payload {payload_name}")
    except ModuleNotFoundError:
        log.log_error(f"Cannot import file {payload_name}")
    return result


def generate_run_code(payload_name: str) -> dict:
    payload_conf = _parse_payload_config(payload_name)
    template_run_code = open("templates/run_payload.py").read()
    template_run_code.replace("{{PAYLOAD_NAME}}", payload_name)
    args_code = ""
    for k, v in enumerate(payload_conf["params"]):
        args_code += f"host.{v}" if k == 0 else f",host.{v}"
    template_run_code.replace("{{PAYLOAD_ARGS}}", payload_name)
    return {
        "service": payload_conf["service"],
        "code": template_run_code
    }
